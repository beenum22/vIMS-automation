package com.xflowresearch.nfv.sctpserver;


import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.SocketAddress;
import java.nio.ByteBuffer;

import com.sun.nio.sctp.MessageInfo;
import com.sun.nio.sctp.SctpChannel;
import com.sun.nio.sctp.SctpServerChannel;

/**
* @author sandarenu
* $LastChangedDate$
* $LastChangedBy$
* $LastChangedRevision$
*/
public class SCTPServer {

    public static void main(String[] args) throws IOException, InterruptedException {
    	
    	InetAddress address = InetAddress.getByName("127.0.0.1");
        SocketAddress serverSocketAddress = new InetSocketAddress(address, 1111);
        System.out.println("create and bind for sctp address");
        SctpServerChannel sctpServerChannel =  SctpServerChannel.open().bind(serverSocketAddress);
        System.out.println("address bind process finished successfully");

        SctpChannel sctpChannel;
        while ((sctpChannel = sctpServerChannel.accept()) != null) 
        {
            System.out.println("client connection received");
            System.out.println("sctpChannel.getRemoteAddresses() = " + sctpChannel.getRemoteAddresses());
            System.out.println("sctpChannel.association() = " + sctpChannel.association());
            MessageInfo messageInfo = sctpChannel.receive(ByteBuffer.allocate(64000) , null, null);
            System.out.println(messageInfo);
            
            Thread.sleep(5000);
            
			final ByteBuffer byteBuffer = ByteBuffer.allocate(64000);
			final MessageInfo messageInfo = MessageInfo.createOutgoing(null, 0);

			System.out.println("messageInfo = " + messageInfo);
			System.out.println("messageInfo.streamNumber() = " + messageInfo.streamNumber());

			byteBuffer.put(payload);
			byteBuffer.flip();

			try {
				sctpChannel.send(byteBuffer, messageInfo);
			} catch (Exception e) {
				logger.error("SCTP channel closed - could not send data");
				e.printStackTrace();
			}
            
        }
        
        
    }
}