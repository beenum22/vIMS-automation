# Copyright (C) Metaswitch Networks 2017
# If license terms are provided to you in a COPYING file in the root directory
# of the source code repository by which you are accessing this code, then
# the license outlined in that COPYING file applies to your use.
# Otherwise no rights are granted except for those provided to you by
# Metaswitch Networks in a separate written agreement.

heat_template_version: 2013-05-23

description: >
  Clearwater deployment

parameters:
  public_mgmt_net_id:
    type: string
    description: ID of public management network
    constraints:
      - custom_constraint: neutron.network
        description: Must be a valid network ID
  private_mgmt_net_cidr:
    type: string
    description: Private management network address (CIDR notation)
    default: 192.168.0.0/24
  private_mgmt_net_gateway:
    type: string
    description: Private management network gateway address
    default: 192.168.0.254
  private_mgmt_net_pool_start:
    type: string
    description: Start of private management network IP address pool
    default: 192.168.0.1
  private_mgmt_net_pool_end:
    type: string
    description: End of private management network IP address pool
    default: 192.168.0.253
  external_mgmt_dns_ip:
    type: string
    description: IP address of external DNS server on management network
    default: 8.8.8.8
  public_sig_net_id:
    type: string
    description: ID of public signaling network
    constraints:
      - custom_constraint: neutron.network
        description: Must be a valid network ID
  private_sig_net_ip_version:
    type: string
    description: IP version (4 or 6) on the private signaling network
    constraints:
      - allowed_values:
        - "4"
        - "6"
        description: Must be 4 (IPv4) or 6 (IPv6)
    default: "4"
  private_mgmt_net_ip_version:
    type: string
    description: IP version (4 or 6) on the private signaling network
    constraints:
      - allowed_values:
        - "4"
        - "6"
        description: Must be 4 (IPv4) or 6 (IPv6)
    default: "4"
  private_sig_net_cidr:
    type: string
    description: Private signaling network address (CIDR notation)
    default: 192.168.1.0/24
  private_sig_net_gateway:
    type: string
    description: Private signaling network gateway address
    default: 192.168.1.254
  private_sig_net_pool_start:
    type: string
    description: Start of private signaling network IP address pool
    default: 192.168.1.1
  private_sig_net_pool_end:
    type: string
    description: End of private signaling network IP address pool
    default: 192.168.1.253
  vip_bono_net_cidr:
    type: string
    description: VIP Bono network address (CIDR notation)
    default: 192.168.2.0/26
  vip_bono_net_gateway:
    type: string
    description: VIP Bono network gateway address
    default: 192.168.2.1
  vip_bono_net_pool_start:
    type: string
    description: Start of VIP Bono network IP address pool
    default: 192.168.2.2
  vip_bono_net_pool_end:
    type: string
    description: End of VIP Bono network IP address pool
    default: 192.168.2.62
  vip_dns_net_cidr:
    type: string
    description: VIP DNS network address (CIDR notation)
    default: 192.168.2.64/26
  vip_dns_net_gateway:
    type: string
    description: VIP DNS network gateway address
    default: 192.168.2.65
  vip_dns_net_pool_start:
    type: string
    description: Start of VIP DNS network IP address pool
    default: 192.168.2.66
  vip_dns_net_pool_end:
    type: string
    description: End of VIP DNS network IP address pool
    default: 192.168.2.126
  external_sig_dns_ip:
    type: string
    description: IP address of external DNS server on signaling network
    default: 8.8.8.8
  flavor:
    type: string
    description: Flavor to use
    constraints:
      - custom_constraint: nova.flavor
        description: Must be a valid flavor name
  image:
    type: string
    description: Name of image to use
    constraints:
      - custom_constraint: glance.image
        description: Must be a valid image name
  key_name:
    type: string
    description: Name of keypair to assign
    constraints:
      - custom_constraint: nova.keypair
        description: Must be a valid keypair name
  repo_url:
    type: string
    description: URL for Clearwater repository
    default: http://repo.cw-ngv.com/stable
  zone:
    type: string
    description: DNS zone
    default: example.com
  dn_range_start:
    type: string
    description: First directory number in pool
    default: "6505550000"
    constraints:
      - allowed_pattern: "[0-9]+"
        description: Must be numeric
  dn_range_length:
    type: string
    description: Number of directory numbers to add to pool
    default: "1000"
    constraints:
      - allowed_pattern: "[0-9]+"
        description: Must be numeric
  dnssec_key:
    type: string
    description: DNSSEC private key (Base64-encoded)
    constraints:
      - allowed_pattern: "[0-9A-Za-z+/=]+"
        description: Must be Base64-encoded
  bono_cluster_size:
    type: number
    description: Number of Bono nodes in Bono cluster
    default: 1
  sprout_cluster_size:
    type: number
    description: Number of Sprout nodes in Sprout cluster
    default: 1
  homer_cluster_size:
    type: number
    description: Number of Homer nodes in Homer cluster
    default: 1
  dime_cluster_size:
    type: number
    description: Number of Dime nodes in Dime cluster
    default: 1
  vellum_cluster_size:
    type: number
    description: Number of Vellum nodes in Vellum cluster
    default: 1
  cloud_project:
    type: string
    description: OpenStack project name
    default: admin
  cloud_user:
    type: string
    description: OpenStack user name
    default: admin
  cloud_url:
    type: string
    description: OpenStack user name
    default: http://100.67.141.190:5000/v2.0
  cloud_password:
    type: string
    description: OpenStack user password
    default: wVEyXbU3jMNnN9y7dgJsd4xJw
    hidden: true
  index:
    type: number
    description: Length of unique string for each node
    default: 0
  name_length:
    type: number
    description: Length of random string generated for names
    default: 6
resources:
  mgmt_network:
    type: ClearwaterIMS::Network
    properties:
      public_net_id: { get_param: public_mgmt_net_id }
      private_net_name: { str_replace: { params: { __stack__: { get_param: "OS::stack_name" } }, template: __stack__-private-management } }
      private_net_ip_version: { get_param: private_mgmt_net_ip_version }
      private_net_cidr: { get_param: private_mgmt_net_cidr }
      private_net_gateway: { get_param: private_mgmt_net_gateway }
      private_net_pool_start: { get_param: private_mgmt_net_pool_start }
      private_net_pool_end: { get_param: private_mgmt_net_pool_end }
      subnet_name: { str_replace: { params: { __stack__: { get_param: "OS::stack_name" } }, template: __stack__-private-mgmt-subnet} }
      dns_ip: { get_param: external_mgmt_dns_ip }

  sig_network:
    type: ClearwaterIMS::Network
    properties:
      private_net_name: { str_replace: { params: { __stack__: { get_param: "OS::stack_name" } }, template: __stack__-private-signaling } }
      public_net_id: { get_param: public_sig_net_id }
      private_net_ip_version: { get_param: private_sig_net_ip_version }
      private_net_cidr: { get_param: private_sig_net_cidr }
      private_net_gateway: { get_param: private_sig_net_gateway }
      private_net_pool_start: { get_param: private_sig_net_pool_start }
      private_net_pool_end: { get_param: private_sig_net_pool_end }
      subnet_name: { str_replace: { params: { __stack__: { get_param: "OS::stack_name" } }, template: __stack__-private-sig-subnet} }
      dns_ip: { get_param: external_sig_dns_ip }

  security_groups:
    type: ClearwaterIMS::SecurityGroups
    properties:
      name_prefix: { get_param: "OS::stack_name" }

  #dns:
  #  type: ClearwaterIMS::DNS
  #  properties:
  #    public_mgmt_net_id: { get_param: public_mgmt_net_id }
  #    private_mgmt_net_id: { get_attr: [ mgmt_network, net_id ] }
  #    public_sig_net_id: { get_param: public_sig_net_id }
  #    private_sig_net_id: { get_attr: [ sig_network, net_id ] }
  #    private_sig_net_cidr: { get_attr: [ sig_network, subnet_cidr ] }
  #    flavor: { get_param: flavor }
  #    image: { get_param: image }
  #    key_name: { get_param: key_name }
  #    dns_security_group: { get_attr: [ security_groups, dns ] }
  #    zone: { get_param: zone }
  #    dnssec_key: { get_param: dnssec_key }
  vip_port_mgmt:
    type: OS::Neutron::Port
    properties:
      network_id: { str_replace: { params: { x: { get_attr: [ mgmt_network, net_id ] } }, template: x } }

  vip_port_sig:
    type: OS::Neutron::Port
    properties:
      network_id: { str_replace: { params: { x: { get_attr: [ sig_network, net_id ] } }, template: x } }

  vip_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_sig_net_id }
      port_id: { get_resource: vip_port_mgmt }

  dns:
    type: ClearwaterIMS::DNSHA
    properties:
      public_mgmt_net_id: { get_param: public_mgmt_net_id }
      private_mgmt_net_id: { get_attr: [ mgmt_network, net_id ] }
      public_sig_net_id: { get_param: public_sig_net_id }
      private_sig_net_id: { get_attr: [ sig_network, net_id ] }
      private_sig_net_cidr: { get_attr: [ sig_network, subnet_cidr ] }
      flavor: { get_param: flavor }
      image: { get_param: image }
      key_name: { get_param: key_name }
      dns_security_group: { get_attr: [ security_groups, dns ] }
      zone: { get_param: zone }
      dnssec_key: { get_param: dnssec_key }
      dns_virtual_ip_sig: { get_attr: [ vip_port_sig, fixed_ips, 0, ip_address ] }
      dns_virtual_ip_mgmt: { get_attr: [ vip_port_mgmt, fixed_ips, 0, ip_address ]}
      index: { get_param: index}

  ellis:
    type: ClearwaterIMS::Ellis
    properties:
      public_mgmt_net_id: { get_param: public_mgmt_net_id }
      private_mgmt_net_id: { get_attr: [ mgmt_network, net_id ] }
      flavor: { get_param: flavor }
      image: { get_param: image }
      key_name: { get_param: key_name }
      base_mgmt_security_group: { get_attr: [ security_groups, base_mgmt ] }
      ellis_mgmt_security_group: { get_attr: [ security_groups, ellis_mgmt ] }
      repo_url: { get_param: repo_url }
      zone: { get_param: zone }
      dn_range_start: { get_param: dn_range_start }
      dn_range_length: { get_param: dn_range_length }
      #dns_mgmt_ip: { get_attr: [ dns, private_mgmt_ip ] }
      dns_mgmt_ip: { get_attr: [ dns, private_mgmt_ip_1 ] }
      dnssec_key: { get_param: dnssec_key }
      index: { get_param: name_length}

  bono_cluster:
    type: ClearwaterIMS::BonoCluster
    properties:
      cluster_size: { get_param: bono_cluster_size}
      public_mgmt_net_id: { get_param: public_mgmt_net_id }
      private_mgmt_net_id: { get_attr: [ mgmt_network, net_id ] }
      public_sig_net_id: { get_param: public_sig_net_id }
      private_sig_subnet_id: { get_attr: [ sig_network, subnet_id ] }
      private_sig_net_id: { get_attr: [ sig_network, net_id ] }
      private_sig_net_cidr: { get_attr: [ sig_network, subnet_cidr ] }
      private_sig_net_gateway: { get_attr: [ sig_network, subnet_gateway ] }
      flavor: { get_param: flavor }
      image: { get_param: image }
      key_name: { get_param: key_name }
      base_mgmt_security_group: { get_attr: [ security_groups, base_mgmt ] }
      bono_sig_security_group: { get_attr: [ security_groups, bono_sig ] }
      repo_url: { get_param: repo_url }
      zone: { get_param: zone }
      stack_id: {get_param: "OS::stack_id"}
      #dns_mgmt_ip: { get_attr: [ dns, private_mgmt_ip ] }
      #dns_sig_ip: { get_attr: [ dns, private_sig_ip ] }
      dns_mgmt_ip: { get_attr: [ dns, private_mgmt_ip_1 ] }
      dns_sig_ip: { get_attr: [ dns, private_sig_ip_1 ] }
      dnssec_key: { get_param: dnssec_key }
      etcd_ip: { get_attr: [ ellis, private_mgmt_ip ] }      

  sprout_cluster:
    type: ClearwaterIMS::SproutCluster
    properties:
      cluster_size: { get_param: sprout_cluster_size}
      public_mgmt_net_id: { get_param: public_mgmt_net_id }
      private_mgmt_net_id: { get_attr: [ mgmt_network, net_id ] }
      public_sig_net_id: { get_param: public_sig_net_id }
      private_sig_net_id: { get_attr: [ sig_network, net_id ] }
      private_sig_net_cidr: { get_attr: [ sig_network, subnet_cidr ] }
      private_sig_net_gateway: { get_attr: [ sig_network, subnet_gateway ] }
      flavor: { get_param: flavor }
      image: { get_param: image }
      key_name: { get_param: key_name }
      base_mgmt_security_group: { get_attr: [ security_groups, base_mgmt ] }
      sprout_sig_outbound_security_group: { get_attr: [ security_groups, sprout_sig_outbound ] }
      sprout_sig_inbound_security_group: { get_attr: [ security_groups, sprout_sig_inbound ] }
      repo_url: { get_param: repo_url }
      zone: { get_param: zone }
      #dns_mgmt_ip: { get_attr: [ dns, private_mgmt_ip ] }
      #dns_sig_ip: { get_attr: [ dns, private_sig_ip ] }
      dns_mgmt_ip: { get_attr: [ dns, private_mgmt_ip_1 ] }
      dns_sig_ip: { get_attr: [ dns, private_sig_ip_1 ] }
      dnssec_key: { get_param: dnssec_key }
      etcd_ip: { get_attr: [ ellis, private_mgmt_ip ] }  

  homer_cluster:
    type: ClearwaterIMS::HomerCluster
    properties:
      cluster_size: { get_param: homer_cluster_size}
      public_mgmt_net_id: { get_param: public_mgmt_net_id }
      private_mgmt_net_id: { get_attr: [ mgmt_network, net_id ] }
      public_sig_net_id: { get_param: public_sig_net_id }
      private_sig_net_id: { get_attr: [ sig_network, net_id ] }
      private_sig_net_cidr: { get_attr: [ sig_network, subnet_cidr ] }
      private_sig_net_gateway: { get_attr: [ sig_network, subnet_gateway ] }
      flavor: { get_param: flavor }
      image: { get_param: image }
      key_name: { get_param: key_name }
      base_mgmt_security_group: { get_attr: [ security_groups, base_mgmt ] }
      homer_mgmt_security_group: { get_attr: [ security_groups, homer_mgmt ] }
      homer_sig_security_group: { get_attr: [ security_groups, homer_sig ] }
      repo_url: { get_param: repo_url }
      zone: { get_param: zone }
      #dns_mgmt_ip: { get_attr: [ dns, private_mgmt_ip ] }
      #dns_sig_ip: { get_attr: [ dns, private_sig_ip ] }
      dns_mgmt_ip: { get_attr: [ dns, private_mgmt_ip_1 ] }
      dns_sig_ip: { get_attr: [ dns, private_sig_ip_1 ] }      
      dnssec_key: { get_param: dnssec_key }
      etcd_ip: { get_attr: [ ellis, private_mgmt_ip ] }

  dime_cluster:
    type: ClearwaterIMS::DimeCluster
    properties:
      cluster_size: { get_param: dime_cluster_size}
      public_mgmt_net_id: { get_param: public_mgmt_net_id }
      private_mgmt_net_id: { get_attr: [ mgmt_network, net_id ] }
      public_sig_net_id: { get_param: public_sig_net_id }
      private_sig_net_id: { get_attr: [ sig_network, net_id ] }
      private_sig_net_cidr: { get_attr: [ sig_network, subnet_cidr ] }
      private_sig_net_gateway: { get_attr: [ sig_network, subnet_gateway ] }
      flavor: { get_param: flavor }
      image: { get_param: image }
      key_name: { get_param: key_name }
      base_mgmt_security_group: { get_attr: [ security_groups, base_mgmt ] }
      dime_mgmt_security_group: { get_attr: [ security_groups, dime_mgmt ] }
      dime_sig_security_group: { get_attr: [ security_groups, dime_sig ] }
      repo_url: { get_param: repo_url }
      zone: { get_param: zone }
      #dns_mgmt_ip: { get_attr: [ dns, private_mgmt_ip ] }
      #dns_sig_ip: { get_attr: [ dns, private_sig_ip ] }
      dns_mgmt_ip: { get_attr: [ dns, private_mgmt_ip_1 ] }
      dns_sig_ip: { get_attr: [ dns, private_sig_ip_1 ] }
      dnssec_key: { get_param: dnssec_key }
      etcd_ip: { get_attr: [ ellis, private_mgmt_ip ] }

  vellum_cluster:
    type: ClearwaterIMS::VellumCluster
    properties:
      cluster_size: { get_param: vellum_cluster_size}
      public_mgmt_net_id: { get_param: public_mgmt_net_id }
      private_mgmt_net_id: { get_attr: [ mgmt_network, net_id ] }
      public_sig_net_id: { get_param: public_sig_net_id }
      private_sig_net_id: { get_attr: [ sig_network, net_id ] }
      private_sig_net_cidr: { get_attr: [ sig_network, subnet_cidr ] }
      private_sig_net_gateway: { get_attr: [ sig_network, subnet_gateway ] }
      flavor: { get_param: flavor }
      image: { get_param: image }
      key_name: { get_param: key_name }
      base_mgmt_security_group: { get_attr: [ security_groups, base_mgmt ] }
      vellum_sig_outbound_security_group: { get_attr: [ security_groups, vellum_sig_outbound ] }
      vellum_sig_inbound_security_group: { get_attr: [ security_groups, vellum_sig_inbound ] }
      repo_url: { get_param: repo_url }
      zone: { get_param: zone }
      #dns_mgmt_ip: { get_attr: [ dns, private_mgmt_ip ] }
      #dns_sig_ip: { get_attr: [ dns, private_sig_ip ] }
      dns_mgmt_ip: { get_attr: [ dns, private_mgmt_ip_1 ] }
      dns_sig_ip: { get_attr: [ dns, private_sig_ip_1 ] }
      dnssec_key: { get_param: dnssec_key }
      etcd_ip: { get_attr: [ ellis, private_mgmt_ip ] }

outputs:
  #test_meta:
  #  value: {"metering.server_group": {get_param: "OS::stack_id"}}
  zone:
    description: DNS zone
    value: { get_param: zone }
  dns_ip:
    description: IP address of DNS
    #value: { get_attr: [ dns, public_mgmt_ip ] }
    value: { get_attr: [ vip_floating_ip, floating_ip_address ] }
  #test_dns_mgmt_list:
  #  value: {get_attr: [dns, private_mgmt_ip_list]}
  #test_dns_mgmt_1:
  #  value: {get_attr: [dns, private_mgmt_ip_1]}
  #test_dns_mgmt_2:
  #  value: {get_attr: [dns, private_mgmt_ip_2]}
  #bono_vip:
  #  description: Private VIP for Bono Cluster
  #  value: { get_attr: [bono_cluster, lb_private_vip]}
  #bono_floating_vip:
  #  description: Public VIP for Bono Cluster
  #  value: { get_attr: [bono_cluster, lb_floating_vip]}
  bono_scaleup_url:
    description: Bono webhook for scale up policy
    value: {get_attr: [bono_cluster, scaleup_webhook]}
  bono_scaledown_url:
    description: Bono webhook for scale down policy
    value: {get_attr: [bono_cluster, scaledown_webhook]}
  sprout_scaleup_url:
    description: Sprout webhook for scale up policy
    value: {get_attr: [sprout_cluster, scaleup_webhook]}
  sprout_scaledown_url:
    description: Sprout webhook for scale down policy
    value: {get_attr: [sprout_cluster, scaledown_webhook]}
  homer_scaleup_url:
    description: Homer webhook for scale up policy
    value: {get_attr: [homer_cluster, scaleup_webhook]}
  homer_scaledown_url:
    description: Homer webhook for scale down policy
    value: {get_attr: [homer_cluster, scaledown_webhook]}
  dime_scaleup_url:
    description: Dime webhook for scale up policy
    value: {get_attr: [dime_cluster, scaleup_webhook]}
  dime_scaledown_url:
    description: Dime webhook for scale down policy
    value: {get_attr: [dime_cluster, scaledown_webhook]}
  vellum_scaleup_url:
    description: Vellum webhook for scale up policy
    value: {get_attr: [vellum_cluster, scaleup_webhook]}
  vellum_scaledown_url:
    description: Vellum webhook for scale down policy
    value: {get_attr: [vellum_cluster, scaledown_webhook]}
