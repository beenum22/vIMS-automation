heat_template_version: 2013-05-23

description: >
  Clearwater Monitoring node

parameters:
  public_mgmt_net_id:
    type: string
    description: ID of public management network
    constraints:
      - custom_constraint: neutron.network
        description: Must be a valid network ID
  private_mgmt_net_id:
    type: string
    description: ID of private management network
    constraints:
      - custom_constraint: neutron.network
        description: Must be a valid network ID
  flavor:
    type: string
    description: Flavor to use
    constraints:
      - custom_constraint: nova.flavor
        description: Must be a valid flavor name
  image:
    type: string
    description: Name of image to use
    constraints:
      - custom_constraint: glance.image
        description: Must be a valid image name
  key_name:
    type: string
    description: Name of keypair to assign
    constraints:
      - custom_constraint: nova.keypair
        description: Must be a valid keypair name
  base_mgmt_security_group:
    type: string
    description: ID of base security group for all Clearwater nodes (management)
  mon_mgmt_security_group:
    type: string
    description: In case it requires more permissions
  zone:
    type: string
    description: DNS zone
    default: example.com
  dns_mgmt_ip:
    type: string
    description: IP address for DNS server
  dnssec_key:
    type: string
    description: DNSSEC private key (Base64-encoded)
    constraints:
      - allowed_pattern: "[0-9A-Za-z+/=]+"
        description: Must be Base64-encoded
  etcd_ip:
    type: string
    description: IP address of an existing member of the etcd cluster
    default: ""
  repo_url:
    type: string
    description: URL for Clearwater repository
    default: http://repo.cw-ngv.com/stable
  bono_up:
    type: string
  bono_down:
    type: string
  sprout_up:
    type: string
  sprout_down:
    type: string
  dime_up:
    type: string
  dime_down:
    type: string
  homer_up:
    type: string
  homer_down:
    type: string
  vellum_up:
    type: string
  vellum_down:
    type: string

resources:
  mgmt_port:
    type: OS::Neutron::Port
    properties:
      # Specify the network ID by string to work around OpenStack issues - see https://github.com/Metaswitch/clearwater-heat/issues/18.
      network_id: { str_replace: { params: { x: { get_param: private_mgmt_net_id } }, template: x } }
      security_groups:
        - { get_param: base_mgmt_security_group }
        - { get_param: mon_mgmt_security_group }

  mgmt_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_mgmt_net_id }
      port_id: { get_resource: mgmt_port }

  copy_scripts:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        write_files:
        - path: /root/monitoring_data/service/main.py
          content: { get_file: "../monitoring_service/main.py"}
        - path: /root/monitoring_data/service/src/__init__.py
          content: { get_file: "../monitoring_service/src/__init__.py"}
        - path: /root/monitoring_data/service/src/monitor.py
          content: { get_file: "../monitoring_service/src/monitor.py"}
        - path: /root/monitoring_data/service/src/utilities.py
          content: { get_file: "../monitoring_service/src/utilities.py"}
        - path: /root/monitoring_data/service/config.ini
          content: { get_file: "../monitoring_service/config.ini"}
        - path: /root/monitoring_data/service/src/settings.py
          content: { get_file: "../monitoring_service/src/settings.py"}
        - path: /root/monitoring_data/service/logging.ini
          content: { get_file: "../monitoring_service/logging.ini"}
        - path: /root/monitoring_data/samples/bono_sample_snmp.conf
          content: { get_file: "../monitoring_service/samples/bono_sample_snmp.conf"}
        - path: /root/monitoring_data/samples/sprout_sample_snmp.conf
          content: { get_file: "../monitoring_service/samples/sprout_sample_snmp.conf"}
        - path: /root/monitoring_data/samples/sample_snmp.conf
          content: { get_file: "../monitoring_service/samples/sample_snmp.conf"}

  update_config_file:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          params:
            __bono_up__: { get_param: bono_up }
            __bono_down__: { get_param: bono_down }
            __sprout_up__: { get_param: sprout_up }
            __sprout_down__: { get_param: sprout_down }
            __dime_up__: { get_param: dime_up }
            __dime_down__: { get_param: dime_down }
            __homer_up__: { get_param: homer_up }
            __homer_down__: { get_param: homer_down }
            __vellum_up__: { get_param: vellum_up }
            __vellum_down__: { get_param: vellum_down }
            __etcd_ip__ : { get_param: etcd_ip }
          template: |
             #!/bin/sh
             echo "[webhooks]" >> /root/monitoring_data/service/config.ini
             echo "bono_scaleup=__bono_up__" >> /root/monitoring_data/service/config.ini
             echo "bono_scaledown=__bono_down__" >> /root/monitoring_data/service/config.ini
             echo "sprout_scaleup=__sprout_up__" >> /root/monitoring_data/service/config.ini
             echo "sprout_scaledown=__sprout_down__" >> /root/monitoring_data/service/config.ini
             echo "dime_scaleup=__dime_up__" >> /root/monitoring_data/service/config.ini
             echo "dime_scaledown=__dime_down__" >> /root/monitoring_data/service/config.ini
             echo "homer_scaleup=__homer_up__" >> /root/monitoring_data/service/config.ini
             echo "homer_scaledown=homer_scaledown" >> /root/monitoring_data/service/config.ini
             echo "vellum_scaleup=__vellum_up__" >> /root/monitoring_data/service/config.ini
             echo "vellum_scaledown=__vellum_down__" >> /root/monitoring_data/service/config.ini
             echo "[etcd]" >> /root/monitoring_data/service/config.ini
             echo "ip=__etcd_ip__" >> /root/monitoring_data/service/config.ini
             echo "port=4000" >> /root/monitoring_data/service/config.ini

  setup_node:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          params:
            __repo_url__: { get_param: repo_url }
            #__etcd_ip__: { get_param: etcd_ip }
          template: { get_file: config_scripts/monit.sh}

  server_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: setup_node}
      - config: {get_resource: copy_scripts}
      - config: {get_resource: update_config_file}
        # referencing another OS::Heat::MultipartMime resource will result
        # in each part of that resource being appended to this one.

  server:
    type: OS::Nova::Server
    properties:
      name: { str_replace: { params: { __zone__: { get_param: zone } }, template: monit.__zone__ } }
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: mgmt_port }
      #personality: { "/root/test1.py":  { get_file: "../test1.py" } }
      user_data_format: RAW
      user_data:
        get_resource: server_init
        #str_replace:
          #params:
          #  __repo_url__: { get_param: repo_url }
          #template: {get_file: config_scripts/monit.sh}

outputs:
  public_mgmt_ip:
    description: IP address in public management network
    value: { get_attr: [ mgmt_floating_ip, floating_ip_address ] }
  private_mgmt_ip:
    description: IP address in private management network
    value: { get_attr: [ mgmt_port, fixed_ips, 0, ip_address ] }
