heat_template_version: 2015-10-15

description: >
  Scalable Bono Cluster

parameters:
  cluster_size:
    type: number
    description: "Size of Bono cluster"
    default: 2
  public_mgmt_net_id:
    type: string
  private_sig_subnet_id:
    type: string
  private_mgmt_net_id:
    type: string
  public_sig_net_id:
    type: string
  private_sig_net_id:
    type: string
  private_sig_net_cidr:
    type: string
  private_sig_net_gateway:
    type: string
  flavor:
    type: string
  image:
    type: string
  key_name:
    type: string
  base_mgmt_security_group:
    type: string
  bono_sig_security_group:
    type: string
  repo_url:
    type: string
  zone:
    type: string
  dns_mgmt_ip:
    type: string
  dns_sig_ip:
    type: string
  dnssec_key:
    type: string
  etcd_ip:
    type: string
  stack_id:
    type: string
  #metadata:
  #  type: string
  #index:
  #  type: string
  #affinity_group:
  #  type: string

resources:
  bono_soft_group:
   type: OS::Nova::ServerGroup
   properties:
    name: Bono VMs on separate compute nodes with soft anti-affinity
    policies:
     - soft-anti-affinity

  bono_hard_group:
   type: OS::Nova::ServerGroup
   properties:
    name: Bono VMs on separate compute nodes
    policies:
     - anti-affinity

  bono_scaleup_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: bono_scale}
      cooldown: 60
      scaling_adjustment: 1

  bono_scaledown_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: bono_scale}
      cooldown: 60
      scaling_adjustment: -1

  bono_scale:
    type: OS::Heat::AutoScalingGroup
    properties:
      min_size: 0
      desired_capacity: 0
      max_size: {get_param: cluster_size}
      resource:
        type: ClearwaterIMS::Bono
        properties:
          public_mgmt_net_id: { get_param: public_mgmt_net_id }
          private_mgmt_net_id: { get_param: private_mgmt_net_id }
          public_sig_net_id: { get_param: public_sig_net_id }
          private_sig_subnet_id: { get_param: private_sig_subnet_id }
          private_sig_net_id: { get_param: private_sig_net_id }
          private_sig_net_cidr: { get_param: private_sig_net_cidr }
          private_sig_net_gateway: { get_param: private_sig_net_gateway }
          flavor: { get_param: flavor }
          image: { get_param: image }
          key_name: { get_param: key_name }
          base_mgmt_security_group: { get_param: base_mgmt_security_group }
          bono_sig_security_group: { get_param: bono_sig_security_group }
          repo_url: { get_param: repo_url }
          zone: { get_param: zone }
          dns_mgmt_ip: { get_param: dns_mgmt_ip }
          dns_sig_ip: { get_param: dns_sig_ip }
          dnssec_key: { get_param: dnssec_key }
          etcd_ip: { get_param: etcd_ip }      
          affinity_group: {get_resource: bono_soft_group}
          stack_id: { get_param: stack_id }
          #metadata: { get_param: metadata }
          #pool_id: { get_resource: pool}

  bono_init:
    type: OS::Heat::ResourceGroup
    properties:
      count: 2
      resource_def:
        type: ClearwaterIMS::Bono
        properties:
          public_mgmt_net_id: { get_param: public_mgmt_net_id }
          private_mgmt_net_id: { get_param: private_mgmt_net_id }
          public_sig_net_id: { get_param: public_sig_net_id }
          private_sig_subnet_id: { get_param: private_sig_subnet_id }
          private_sig_net_id: { get_param: private_sig_net_id }
          private_sig_net_cidr: { get_param: private_sig_net_cidr }
          private_sig_net_gateway: { get_param: private_sig_net_gateway }
          flavor: { get_param: flavor }
          image: { get_param: image }
          key_name: { get_param: key_name }
          base_mgmt_security_group: { get_param: base_mgmt_security_group }
          bono_sig_security_group: { get_param: bono_sig_security_group }
          repo_url: { get_param: repo_url }
          zone: { get_param: zone }
          dns_mgmt_ip: { get_param: dns_mgmt_ip }
          dns_sig_ip: { get_param: dns_sig_ip }
          dnssec_key: { get_param: dnssec_key }
          etcd_ip: { get_param: etcd_ip }      
          affinity_group: {get_resource: bono_hard_group}
          stack_id: { get_param: stack_id }
          #pool_id: { get_resource: pool}

  cpu_alarm_high:
    type: OS::Aodh::GnocchiAggregationByResourcesAlarm
    properties:
      description: Scale up if CPU > 60% for 5 minutes
      metric: cpu_util
      aggregation_method: mean
      granularity: 300
      evaluation_periods: 1
      threshold: 60
      resource_type: instance
      comparison_operator: gt
      alarm_actions:
        - str_replace:
            template: trust+url
            params:
              url: {get_attr: [bono_scaleup_policy, signal_url]}
      query:
        list_join:
          - ''
          - - {'=': {server_group: {get_param: stack_id}}}

  cpu_alarm_low:
    type: OS::Aodh::GnocchiAggregationByResourcesAlarm
    properties:
      description: Scale down if CPU < 15% for 5 minutes
      metric: cpu_util
      aggregation_method: mean
      granularity: 300
      evaluation_periods: 1
      threshold: 15
      resource_type: instance
      comparison_operator: lt
      alarm_actions:
        - str_replace:
            template: trust+url
            params:
              url: {get_attr: [bono_scaledown_policy, signal_url]}
      query:
        list_join:
          - ''
          - - {'=': {server_group: {get_param: "OS::stack_id"}}}

  #monitor:
  #  type: OS::Neutron::LBaaS::HealthMonitor
  #  properties:
  #    delay: 5
  #    type: HTTP
  #    timeout: 5
  #    max_retries: 3
  #    pool: { get_resource: pool }

  #pool:
  #  type: OS::Neutron::LBaaS::Pool
  #  properties:
  #    lb_algorithm: ROUND_ROBIN
  #    protocol: TCP
  #    listener: { get_resource: listener }

  #listener:
  #  type: OS::Neutron::LBaaS::Listener
  #  properties:
  #    loadbalancer: { get_resource: lb }
  #    protocol: TCP
  #    protocol_port: 8080
  
  #lb:
  #  type: OS::Neutron::LBaaS::LoadBalancer
  #  properties:
  #    vip_subnet: { get_param: private_sig_subnet_id }

  #lb_floating_ip:
  #  type: OS::Neutron::FloatingIP
  #  properties:
  #    floating_network_id: { get_param: public_sig_net_id }
  #    port_id: { get_attr: [ lb, vip_port_id ] }

outputs:
  scaleup_webhook:
    description: Bono webhook for scale up policy
    value: {get_attr: [bono_scaleup_policy, alarm_url]}
  scaledown_webhook:
    description: Bono webhook for scale down policy
    value: {get_attr: [bono_scaledown_policy, alarm_url]}
  #lb_private_vip:
  #   value: {get_attr: [ lb, vip_address ] }
  #   description: VIP for our Load Balancer
  #lb_floating_vip:
  #  description: Public VIP for our Load Balancer
  #  value: { get_attr: [ lb_floating_ip, floating_ip_address ] }
  #lb_vip_port:
  #  value: { get_attr: [ lb, vip_port_id ] }
  