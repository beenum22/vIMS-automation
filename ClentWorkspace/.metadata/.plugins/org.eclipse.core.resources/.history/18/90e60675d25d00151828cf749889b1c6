package com.xflowresearch.nfv.testertool.sctp;

import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.SocketAddress;
import java.net.UnknownHostException;
import java.nio.ByteBuffer;

import com.sun.nio.sctp.MessageInfo;
import com.sun.nio.sctp.SctpChannel;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/**
 * SctpClient
 * 
 *SCTP wrapper class to establish sctp connection to a server 
 *and send and recieve messages to and from the server
 * 
 * @author ahmadarslan
 */
public class SctpClient {

	private Boolean isConnected;
	private SocketAddress socketAddress;
	private SctpChannel sctpChannel;
	//private Integer localPort = 6060; // TODO change to user input.
	
	private static final Logger logger =
			LoggerFactory.getLogger(SctpClient.class);

	public SctpClient()
	{
		isConnected = false;
	}
	
	public Boolean isConnected()
	{
		return isConnected;
	}


	/**
	 * Connect to the SCTP Server
	 */
	public void connectToHost(String ip, int port)
	{
		InetAddress address = null;
		try {
			address = InetAddress.getByName(ip);
		} catch (UnknownHostException e) {
			logger.error("Could not build SCTP Server address {}!", ip);
			e.printStackTrace();
		}
		socketAddress = new InetSocketAddress(address, port);

		try {
			sctpChannel = SctpChannel.open();
			sctpChannel.bind(new InetSocketAddress(0));        // '0' instead of user defined port to get an available port assigned!!
			sctpChannel.connect(socketAddress, 1 ,1);
		} catch (IOException e) {
			logger.error("SCTP connection to server was refused!");
			return;
		}
		logger.info("SCTP Connection Established ip:{} port:{}",ip, port);
		isConnected = true;

	}
	
	
	
	/**
	 * Send protocol paylod specified by 
	 * the protocol id over open SCTP Channel
	 */
	public void sendProtocolPayload(byte[] payload, int protocolID)
	{
		if(isConnected)
		{
			final ByteBuffer byteBuffer = ByteBuffer.allocate(64000);
			MessageInfo messageInfo = MessageInfo.createOutgoing(null, 0);

			//System.out.println("messageInfo = " + messageInfo);
			//System.out.println("messageInfo.streamNumber() = " + messageInfo.streamNumber());

			byteBuffer.put(payload);
			byteBuffer.flip();

			messageInfo.payloadProtocolID(protocolID);

			try {
				sctpChannel.send(byteBuffer, messageInfo);
			} catch (Exception e) {
				logger.error("SCTP channel closed - could not send data");
				//e.printStackTrace();
			}
		}
		else
			logger.error("SCTP connection not active!");
	}

	
	
	/**
	 * Send data over open SCTP Channel
	 */
	public void sendData(byte[] payload)
	{
		if(isConnected)
		{
			final ByteBuffer byteBuffer = ByteBuffer.allocate(64000);
			final MessageInfo messageInfo = MessageInfo.createOutgoing(null, 0);

			System.out.println("messageInfo = " + messageInfo);
			System.out.println("messageInfo.streamNumber() = " + messageInfo.streamNumber());

			byteBuffer.put(payload);
			byteBuffer.flip();

			try {
				sctpChannel.send(byteBuffer, messageInfo);
			} catch (Exception e) {
				logger.error("SCTP channel closed - could not send data");
				e.printStackTrace();
			}
			
			//////////
            MessageInfo messageInfo1 = sctpChannel.receive(ByteBuffer.allocate(64000) , null, null);
            System.out.println(messageInfo1);
			/////////
		}
		else 
			logger.error("SCTP connection not active");
	}
	
	
	
	public void recievingThread(){
		
	}

}
