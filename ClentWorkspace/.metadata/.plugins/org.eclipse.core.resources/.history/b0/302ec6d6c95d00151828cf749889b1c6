package com.xflowresearch.nfv.testertool.sctp;

import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.SocketAddress;
import java.net.UnknownHostException;
import java.nio.ByteBuffer;

import com.sun.nio.sctp.MessageInfo;
import com.sun.nio.sctp.SctpChannel;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SctpClient {

	private Boolean isConnected;
	private SocketAddress socketAddress;
	private SctpChannel sctpChannel;
	private Integer localPort = 6060; // TODO change to user input.
	
	

	public SctpClient()
	{
		isConnected = false;
	}
	
	public Boolean isConnected()
	{
		return isConnected;
	}


	public void connectToHost(String ip, int port)
	{
		InetAddress address = null;
		try {
			address = InetAddress.getByName(ip);
		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		socketAddress = new InetSocketAddress(address, port);

		try {
			sctpChannel = SctpChannel.open();
			sctpChannel.bind(new InetSocketAddress(localPort));
			sctpChannel.connect(socketAddress, 1 ,1);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		isConnected = true;
	}


	public void sendProtocolPayload(byte[] payload, int protocolID)
	{
		if(isConnected)
		{
			final ByteBuffer byteBuffer = ByteBuffer.allocate(64000);
			MessageInfo messageInfo = MessageInfo.createOutgoing(null, 0);

			System.out.println("messageInfo = " + messageInfo);
			System.out.println("messageInfo.streamNumber() = " + messageInfo.streamNumber());

			byteBuffer.put(payload);
			byteBuffer.flip();

			messageInfo.payloadProtocolID(protocolID);

			try {
				sctpChannel.send(byteBuffer, messageInfo);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		else
			return;
	}

	
	public void sendData(byte[] payload)
	{
		if(isConnected)
		{
			final ByteBuffer byteBuffer = ByteBuffer.allocate(64000);
			final MessageInfo messageInfo = MessageInfo.createOutgoing(null, 0);

			System.out.println("messageInfo = " + messageInfo);
			System.out.println("messageInfo.streamNumber() = " + messageInfo.streamNumber());

			byteBuffer.put(payload);
			byteBuffer.flip();

			try {
				sctpChannel.send(byteBuffer, messageInfo);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		else 
			return;
	}

}
