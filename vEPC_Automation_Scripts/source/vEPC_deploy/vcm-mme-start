#!/bin/sh
################################################################################
#                                                                              #
# Filename      : vcm-mme-start                                                #
# Description   : Used to start the MME using AMF                              #
#                                                                              #
# Copyright (c) 2012-2103 Connectem Inc. All Rights Reserved.                  #
#                                                                              #        
# This file is part of VCM.                                                    #
#                                                                              #
# This file and related documentation is protected by copyright and no part of #
# this file or related documentation may be used, copied, reproduced,          # 
# re-distributed, or decompiled without prior explicit and written             #
# authorization of Connectem Inc.                                              #
#                                                                              #
################################################################################

name=$(basename $0)

if [ -z $SA_AMF_COMPONENT_NAME ]; then
	logger -st $name "not AMF component context"
	exit 199
fi

export VCM_LOG_LEVEL=INFO

# Set Alarm level for mme
export VCM_ALARM_LEVEL=CRIT

export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH

mkdir -p /opt/VCM/tmp
cd /opt/VCM/tmp
\cp /opt/VCM/bin/vcmMme /opt/VCM/tmp
prog="vcmMme"
binary=/opt/VCM/tmp/$prog

if ! [ -x $binary ]; then
	logger -st $name  "$binary not executable"
	exit 198
fi

# Source LSB functions library
. /lib/lsb/init-functions

piddir="/tmp"
pidfile="$piddir/${SA_AMF_COMPONENT_NAME}.pid"

RETVAL=0

start()
{
	ifconfig eth1:1 172.17.1.20/24 -arp
	args=""
	echo -n "Starting $prog: "
        mkdir -p /opt/VCM/logs/mme/
        CURR_TIME=`date '+%d-%b-%Y_%H:%M:%S'`

	start_daemon -p $pidfile $binary $args > /opt/VCM/logs/mme/vcm-mme.stdout_$CURR_TIME 2>&1
        vcm_comp="mme"
        std_arg="vcm-mme-stdout"
        std_arg+="-$CURR_TIME-"
        #start_daemon -p $pidfile $binary $args > /opt/VCM/etc/scripts/vcmStdoutRotate.py $vcm_comp $std_arg 2>&1

	RETVAL=$?
	if [ $RETVAL -ne 0 ]; then
		logger -st $name "Starting $binary failed"
	fi
	return $RETVAL
}

stop()
{
	ifconfig eth1:1 down
	echo -n "Stopping $prog: "
	killproc -p $pidfile $binary
	RETVAL=$?
	if [ $RETVAL -ne 0 ]; then
		logger -st $name "killproc $binary failed"
	fi
	return $RETVAL
}

status()
{
	pidofproc -p $pidfile $binary
	RETVAL=$?
	return $RETVAL
}

CMD=$1
case $CMD in
	start|instantiate)
		shift
		start $*
		RETVAL=$?
		;;
	stop|cleanup)
		stop $*
		RETVAL=$?
		;;
	status)
		status
		RETVAL=$?
		;;
	*)
		echo "Usage: $0 {instantiate|cleanup}"
		RETVAL=2
esac

exit $RETVAL

