heat_template_version: 2013-05-23

description: >
  DNS server exposing dynamic DNS using DNSSEC

parameters:
  public_net_id:
    type: string
    description: ID of public network
    constraints:
      - custom_constraint: neutron.network
        description: Must be a valid network ID
  private_net_id:
    type: string
    description: ID of private network
    constraints:
      - custom_constraint: neutron.network
        description: Must be a valid network ID
  flavor:
    type: string
    description: Flavor to use
    constraints:
      - custom_constraint: nova.flavor
        description: Must be a valid flavor name
  availability_zone:
    type: string
    description: The Availability Zone to launch the instance.
  image:
    type: string
    description: Name of image to use
    constraints:
      - custom_constraint: glance.image
        description: Must be a valid image name
  key_name:
    type: string
    description: Name of keypair to assign
    constraints:
      - custom_constraint: nova.keypair
        description: Must be a valid keypair name
  dns_security_group:
    type: string
    description: ID of security group for DNS nodes
  zone:
    type: string
    description: DNS zone
    default: example.com
  dnssec_key:
    type: string
    description: DNSSEC private key (Base64-encoded)

resources:
  port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: private_net_id }
      security_groups:
        - { get_param: dns_security_group }

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: port }

  server:
    type: OS::Nova::Server
    properties:
      name: { str_replace: { params: { __zone__: { get_param: zone } }, template: ns.__zone__ } }
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      availability_zone: { get_param: availability_zone}
      networks:
        - port: { get_resource: port }
      user_data:
        str_replace:
          params:
            __zone__: { get_param: zone }
            __dnssec_key__: { get_param: dnssec_key }
            __public_ip__: { get_attr: [ floating_ip, floating_ip_address ] }
          template: |
            #!/bin/bash
            cp /home/ec2-user/.ssh/authorized_keys /root/.ssh/
            sudo grep "login as the ubuntu user" /root/.??*
            sudo cp /home/ec2-user/.ssh/authorized_keys /root/.ssh/
outputs:
  public_ip:
    description: IP address in public network
    value: { get_attr: [ floating_ip, floating_ip_address ] }
  private_ip:
    description: IP address in private network
    value: { get_attr: [ server, first_address ] }
  zone:
    description: DNS zone
    value: { get_param: zone }
  dnssec_key:
    description: DNSSEC private key (Base64-encoded)
    value: { get_param: dnssec_key }
